from PyQt6 import QtWidgets, QtCore, QtGui
import sys, random, time

class Host:
    def __init__(self, name, ip):
        self.name = name
        self.ip = ip
        self.status = "online"
        self.latency = [random.randint(10,30) for _ in range(12)]
        self.packet_loss = 0
        self.jitter = 5
        self.uptime = "—"

class MonitorUI(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("監控儀表板 - PyQt6")
        self.resize(1000,600)

        # 主Widget
        central = QtWidgets.QWidget()
        self.setCentralWidget(central)
        layout = QtWidgets.QVBoxLayout(central)

        # 上方控制列
        top_bar = QtWidgets.QHBoxLayout()
        self.state_label = QtWidgets.QLabel("狀態: 執行中")
        self.start_btn = QtWidgets.QPushButton("開始")
        self.pause_btn = QtWidgets.QPushButton("暫停")
        self.simulate_btn = QtWidgets.QPushButton("模擬波動")

        top_bar.addWidget(self.state_label)
        top_bar.addWidget(self.start_btn)
        top_bar.addWidget(self.pause_btn)
        top_bar.addWidget(self.simulate_btn)
        layout.addLayout(top_bar)

        # 執行監控區
        self.progress = QtWidgets.QProgressBar()
        self.cpu_label = QtWidgets.QLabel("CPU: 0%")
        self.mem_label = QtWidgets.QLabel("記憶體: 0%")
        self.log_box = QtWidgets.QTextEdit()
        self.log_box.setReadOnly(True)

        monitor_box = QtWidgets.QGroupBox("執行監控")
        m_layout = QtWidgets.QVBoxLayout(monitor_box)
        m_layout.addWidget(self.progress)
        m_layout.addWidget(self.cpu_label)
        m_layout.addWidget(self.mem_label)
        m_layout.addWidget(QtWidgets.QLabel("最新事件:"))
        m_layout.addWidget(self.log_box)

        layout.addWidget(monitor_box)

        # 四台電腦狀態區
        hosts_box = QtWidgets.QGroupBox("電腦網路狀況")
        h_layout = QtWidgets.QGridLayout(hosts_box)
        self.host_widgets = []

        self.hosts = [
            Host("工作站 A","192.168.1.101"),
            Host("工作站 B","192.168.1.102"),
            Host("伺服器 C","192.168.1.201"),
            Host("測試機 D","192.168.1.150")
        ]

        for i,host in enumerate(self.hosts):
            group = QtWidgets.QGroupBox(f"{host.name} ({host.ip})")
            v = QtWidgets.QVBoxLayout(group)
            status = QtWidgets.QLabel("狀態: 正常")
            latency = QtWidgets.QLabel("延遲: — ms")
            jitter = QtWidgets.QLabel("抖動: — ms")
            loss = QtWidgets.QLabel("丟包: — %")
            uptime = QtWidgets.QLabel("上線時間: —")
            v.addWidget(status)
            v.addWidget(latency)
            v.addWidget(jitter)
            v.addWidget(loss)
            v.addWidget(uptime)
            self.host_widgets.append((status, latency, jitter, loss, uptime))
            h_layout.addWidget(group, i//2, i%2)

        layout.addWidget(hosts_box)

        # 訊號連接
        self.start_btn.clicked.connect(self.start)
        self.pause_btn.clicked.connect(self.pause)
        self.simulate_btn.clicked.connect(self.simulate)

        # 定時更新
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.update_metrics)
        self.timer.start(2000)

        self.running = True

    def log(self, msg):
        self.log_box.append(f"[{time.strftime('%H:%M:%S')}] {msg}")

    def start(self):
        self.running = True
        self.state_label.setText("狀態: 執行中")
        self.log("開始監控")

    def pause(self):
        self.running = False
        self.state_label.setText("狀態: 已暫停")
        self.log("暫停監控")

    def simulate(self):
        self.log("手動觸發健康檢查")
        for h in self.hosts:
            r = random.random()
            if r>0.8:
                h.status="offline"
                h.packet_loss=100
                h.jitter=0
                h.latency=[0]*12
            elif r>0.6:
                h.status="degraded"
                h.packet_loss=random.randint(1,5)
                h.jitter=random.randint(10,30)
                h.latency=[random.randint(50,100) for _ in range(12)]
            else:
                h.status="online"
                h.packet_loss=0
                h.jitter=random.randint(2,10)
                h.latency=[random.randint(10,30) for _ in range(12)]

        self.update_hosts()

    def update_metrics(self):
        if not self.running:
            return
        cpu = random.randint(10,90)
        mem = random.randint(10,90)
        prog = random.randint(0,100)
        self.cpu_label.setText(f"CPU: {cpu}%")
        self.mem_label.setText(f"記憶體: {mem}%")
        self.progress.setValue(prog)
        self.update_hosts()

    def update_hosts(self):
        for i,h in enumerate(self.hosts):
            st = self.host_widgets[i]
            if h.status=="online":
                st[0].setText("狀態: 正常")
            elif h.status=="degraded":
                st[0].setText("狀態: 品質不佳")
            else:
                st[0].setText("狀態: 離線")
            st[1].setText(f"延遲: {h.latency[-1]} ms")
            st[2].setText(f"抖動: {h.jitter} ms")
            st[3].setText(f"丟包: {h.packet_loss}%")
            st[4].setText(f"上線時間: {h.uptime}")

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    win = MonitorUI()
    win.show()
    sys.exit(app.exec())
